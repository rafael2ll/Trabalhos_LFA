# -*- coding: utf-8 -*-
"""T1_LFA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xYgK05q2g6ApzsSVjL_VXzsYkRV6Vu3-
"""

import sys
import numpy as np

nome_arq = input("Digite o caminho do arquivo: ")

"""Tomando o seguinte tipo de arquivo:<br>
{Estados} <br>
{Alfabeto} <br>
{Estado Inicial} <br>
{Estado Final} <br>
Função de Transição
"""

file = open(nome_arq, "r")
linhas = file.readlines()

estados = linhas[0].split(",")
estados[0] = estados[0][1:]
aux = len(estados)-1
estados[aux]= estados[aux][0: len(estados[aux])-2]
estados

alfabeto = linhas[1].split(',')
alfabeto[0] = alfabeto[0][1:]
aux = len(alfabeto)-1
alfabeto[aux]= alfabeto[aux][0: len(alfabeto[aux])-2]
alfabeto.append("E")

estado_ini = linhas[2][1: len(linhas[2])-2]
estado_ini

estado_final = linhas[3][1: len(linhas[2])-2]
estado_final

linhas = linhas[4:]

"""### Matriz de transição
Criada a partir da representação de cada conjunto de estados em uma lista de indíces de acordo com o vetor de estados
<h4> Descrição do Processo</h4>
O arquivo contem a matriz de transição de estados, onde cada linha rperesenta as transições de cada linha por cada símbolo do alfabeto e a palavra vazia (categorizando o e-fecho do estado).
"""

matriz_transicoes = []
for line in linhas:
    l = line.split()[1:]
    l = list(map(lambda n: n[1 : len(n)-1].split(','), l))
    print(l)
    helper = []
    for n in range(len(alfabeto)):
        helper.append([estados.index(x) for x in l[n]])
    
    matriz_transicoes.append(helper)
matriz_transicoes


palavra = input("Digite uma palavra: ")

pode_processar = True
for a in palavra:
  if a not in alfabeto:
    pode_processar = False
    break
    
if pode_processar:
  if(leia(palavra, 0)): print("A palavra {} eh aceita".format(palavra))
  else: print("A palavra {} não eh aceita".format(palavra))
else: print("A palavra {} não eh aceita".format(palavra))


def leia(v, estad):
    if (len(v) > 1):
        p_estados = matriz_transicoes[estad][alfabeto.index(v[0])+1]
        print("v: {}, estado: {}, possiveis: {}".format(v, estados[estad], list(map(lambda d: estados[d], p_estados))))
        if p_estados.count(estado_final) > 0 : return True
        for p in p_estados:
      #      print ("Testando {} para sequenncia {}".format(estados[p], v))
            b = leia(v[1:], p)
      #      print(b)
            if b : return True
    elif (len(v) == 1): return  (matriz_transicoes[estad][alfabeto.index(v[0])+1].count(estados.index(estado_final)) > 0)
    else: return False
